"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Download, Loader2 } from "lucide-react"
import { PDFDownloadLink, Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer"

// Define styles for PDF
const styles = StyleSheet.create({
  page: {
    padding: 30,
    backgroundColor: "#ffffff",
  },
  header: {
    marginBottom: 20,
    borderBottom: "1 solid #eeeeee",
    paddingBottom: 10,
  },
  title: {
    fontSize: 24,
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 14,
    color: "#666666",
    marginBottom: 5,
  },
  section: {
    margin: 10,
    padding: 10,
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 16,
    marginBottom: 10,
    backgroundColor: "#f5f5f5",
    padding: 5,
  },
  text: {
    fontSize: 12,
    marginBottom: 5,
    lineHeight: 1.5,
  },
  parameterTable: {
    display: "flex",
    flexDirection: "column",
    marginBottom: 20,
  },
  tableRow: {
    display: "flex",
    flexDirection: "row",
    borderBottom: "1 solid #eeeeee",
    paddingVertical: 5,
  },
  tableHeader: {
    fontWeight: "bold",
  },
  tableCell: {
    flex: 1,
    fontSize: 10,
  },
  footer: {
    position: "absolute",
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: "center",
    fontSize: 10,
    color: "#666666",
    borderTop: "1 solid #eeeeee",
    paddingTop: 10,
  },
})

// PDF Document component
const SimulationPDF = ({ simulation, parameters }: any) => {
  if (!simulation) {
    return (
      <Document>
        <Page size="A4" style={styles.page}>
          <Text style={styles.title}>Simulation Report</Text>
          <Text style={styles.text}>No simulation data available.</Text>
        </Page>
      </Document>
    )
  }

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>{simulation.title || "Simulation Report"}</Text>
          <Text style={styles.subtitle}>Synaptiq Simulation Lab</Text>
          <Text style={styles.subtitle}>Generated: {new Date().toLocaleString()}</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Explanation</Text>
          <Text style={styles.text}>{simulation.explanation || "No explanation available."}</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Parameters</Text>
          <View style={styles.parameterTable}>
            <View style={[styles.tableRow, styles.tableHeader]}>
              <Text style={styles.tableCell}>Parameter</Text>
              <Text style={styles.tableCell}>Value</Text>
              <Text style={styles.tableCell}>Unit</Text>
            </View>
            {simulation.parameters &&
              simulation.parameters.map((param: any) => (
                <View key={param.name} style={styles.tableRow}>
                  <Text style={styles.tableCell}>{param.label}</Text>
                  <Text style={styles.tableCell}>{String(parameters[param.name] || param.default)}</Text>
                  <Text style={styles.tableCell}>{param.unit}</Text>
                </View>
              ))}
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Governing Equations</Text>
          {simulation.equations &&
            simulation.equations.map((equation: string, index: number) => (
              <Text key={index} style={styles.text}>
                Equation {index + 1}: {equation.replace(/\\[a-zA-Z]+{|\\[a-zA-Z]+|[{}]/g, "")}
              </Text>
            ))}
        </View>

        <Text style={styles.footer}>
          Generated by Synaptiq Scientific Simulation Platform â€¢ {new Date().toLocaleDateString()}
        </Text>
      </Page>
    </Document>
  )
}

interface PDFDownloadButtonProps {
  simulation: any
  parameters: Record<string, number>
}

export function PDFDownloadButton({ simulation, parameters }: PDFDownloadButtonProps) {
  const [isClient, setIsClient] = useState(false)

  // Use useEffect to detect client-side rendering
  useState(() => {
    setIsClient(true)
  })

  // If we're not on the client yet, show a loading button
  if (!isClient) {
    return (
      <Button disabled>
        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        Loading PDF Generator...
      </Button>
    )
  }

  return (
    <PDFDownloadLink
      document={<SimulationPDF simulation={simulation} parameters={parameters} />}
      fileName={`${simulation.title.toLowerCase().replace(/\s+/g, "-")}-report.pdf`}
      className="inline-block"
    >
      {({ loading, error }) => (
        <Button disabled={loading}>
          {loading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Preparing PDF...
            </>
          ) : (
            <>
              <Download className="mr-2 h-4 w-4" />
              Generate Research Report
            </>
          )}
        </Button>
      )}
    </PDFDownloadLink>
  )
}
